function tf = load_APE_zip(varargin)
    % This function load_APE_zip is designed to load APE mapping data, which
    % are contained in a zip file.
    %
    % This program works for the APE beamline, Elettra Synchrotron Trieste.
    % However, since the APE data is generated by DA30, using SES by Scienta,
    % this program also serves the data from other beamline which uses DA30
    % (such as Nano ARPES branch of i05 in Diamond Light Source).
    %
    % The function then loads the file into the workspace with the
    % variable name the same as the filename.
    % The variable contains the field "info", axis information of
    % "x", "y" and "z" depending on the measuring data's dimention
    % and the field "value" for the bulk data.
    %
    % Bug report: penghan1992@gmail.com
    tf = true;

    if nargin ~= 1
        tf = false;
        return
    end

    [~, ~, ext] = fileparts(varargin{1});

    if ~strcmpi(ext, '.zip')
        tf = false;
        return
    end

    %% Unzip file to temp folder
    sourceFile = varargin{1};
    tempFolder = ['temp' char(datetime('now','Format','ddHHmmssSSS'))];
    mkdir(tempFolder);
    tempPath = fullfile(cd, tempFolder);
    unzip(sourceFile, tempPath);

    %% DIvide ini file into data sets
    [~, dataName, ~] = fileparts(sourceFile);
    [ini_names, data_names] = divide_ini(tempPath, 'viewer.ini', dataName);
    %%
    for i = 1:length(ini_names)

        viewerFile = ini_names{i};
        % open the viewer file
        fViewer = fopen(viewerFile);

        if fViewer == -1
            tf = -1;
            errordlg(['Viewer file missing in ', varargin{1}]);
            return
        end

        infoline = fgetl(fViewer);
        while ~feof(fViewer)

            if length(infoline) > 9

                if strcmp(infoline(end - 9:end - 1), 'channel_1')
                    break;
                end

            end

            infoline = fgetl(fViewer);
            [~, EndInd] = regexp(infoline, '.*=');

            if ~isempty(EndInd)
                infoName = infoline(1:EndInd - 1);
                infoValue = infoline(EndInd + 1:end);

                if strcmp(infoName, 'path')
                    fileName = infoValue;
                    binPath = fullfile(tempPath, fileName);
                elseif strcmp(infoName, 'ini_path')
                    fileName = infoValue;
                    iniPath = fullfile(tempPath, fileName);
                elseif strcmp(infoName, 'width')
                    nw = str2double(infoValue);
                elseif strcmp(infoName, 'height')
                    nh = str2double(infoValue);
                elseif strcmp(infoName, 'depth')
                    nd = str2double(infoValue);
                elseif strcmp(infoName, 'width_offset')
                    wStart = str2double(infoValue);
                elseif strcmp(infoName, 'width_delta')
                    wStep = str2double(infoValue);
                elseif strcmp(infoName, 'height_offset')
                    hStart = str2double(infoValue);
                elseif strcmp(infoName, 'height_delta')
                    hStep = str2double(infoValue);
                elseif strcmp(infoName, 'depth_offset')
                    dStart = str2double(infoValue);
                elseif strcmp(infoName, 'depth_delta')
                    dStep = str2double(infoValue);
                elseif strcmp(infoName, 'name')
                    dataName = infoValue;
                    data.info.DataName = dataName;
                end

            end

        end

        fclose(fViewer);

        % open the bin file
        fileInfo = dir(binPath);
        nUnit = fileInfo.bytes / nw / nh / nd;

        if nUnit == 4
            Precision = 'single=>double';
        elseif nUnit == 8
            Precision = 'double';
        else
            errordlg('Size Infomation does not match data in', varargin{1});
            tf = -1;
            return;
        end

        %% Read Information
        fIni = fopen(iniPath);
        fData = fopen(binPath);

        if fIni == -1
            % Information file not found
            tf = false;
            return;
        end

        if fData == -1
            % Data file not found
            tf = false;
            return;
        end

        while ~feof(fIni)
            infoline = fgetl(fIni);
            [~, EndInd] = regexp(infoline, '.*=');

            if ~isempty(EndInd)
                comments = strfind(infoline, 'Comments');

                if ~isempty(comments)
                    data.info.comments = infoline(10:end);
                else
                    infoName = infoline(1:EndInd - 1);
                    infoValue = infoline(EndInd + 1:end);
                    infoName = strrep(infoName, ' ', '');
                    infoName = strrep(infoName, '-', '');
                    data.info.(infoName) = infoValue;
                end

            end

            if wStep == 0 || hStep == 0 || dStep == 0

                if strcmp(infoName, 'Thetax_Low')
                    y1 = str2double(infoValue);
                elseif strcmp(infoName, 'Thetax_High')
                    y2 = str2double(infoValue);
                elseif strcmp(infoName, 'Thetax_Steps')
                    ny = str2double(infoValue);
                elseif strcmp(infoName, 'Thetay_Low')
                    x1 = str2double(infoValue);
                elseif strcmp(infoName, 'Thetay_High')
                    x2 = str2double(infoValue);
                elseif strcmp(infoName, 'Thetay_Steps')
                    nx = str2double(infoValue);
                elseif strcmp(infoName, 'LowEnergy')
                    z1 = str2double(infoValue);
                elseif strcmp(infoName, 'HighEnergy')
                    z2 = str2double(infoValue);
                elseif strcmp(infoName, 'EnergyStep')
                    nz = str2double(infoValue);
                end

            end

        end

        fclose(fIni);

        if wStep == 0
            wStep = (z2 - z1) / (nz - 1);
        end

        if hStep == 0
            hStep = (y2 - y1) / (ny - 1);
        end

        if dStep == 0
            dStep = (x2 - x1) / (nx - 1);
        end

        %% Read Data

        value0 = fread(fData, Inf, Precision);
        value0 = reshape(value0, [nw, nh, nd]);
        data.value = permute(value0, [3 2 1]);
        data.x = (1:nd) * dStep + dStart;
        data.y = (1:nh) * hStep + hStart;
        data.z = (1:nw) * wStep + wStart;

        fclose(fData);

        dataNameNew = data_names{i};
        dataNameNew = strrep(dataNameNew, ' ', '_');
        dataNameNew = strrep(dataNameNew, '-', '_');
%         display(dataNameNew);
%         display(binPath);
%         display([]);
        assignin('base', dataNameNew, data);
    end

    %% Delete temp folder
    while ~rmdir(tempFolder,'s')
        pause(0.01);
    end
    % try
    %     rmdir(tempFolder, 's');
    % catch
    %     disp(['Can not remove folder ', tempFolder]);
    %     disp('You can remove it manually later.');
    % end

end

function [ini_names, data_names] = divide_ini(filepath, filename, name_head)
    % get the ini file from the ini file path
    ini = fileread(fullfile(filepath, filename));
    % according to the ini standard, ``['' in a new line indicates a new
    % section
    sections = strsplit(ini, '\n[');
    sections_dict = containers.Map;
    % loop to get section in a dictionary
    for i = 1:length(sections)

        if sections{i}(1) ~= '['
            sections{i} = ['[', sections{i}];
        end

        section_split = strsplit(sections{i}, '\n');
        sections_dict(strtrim(section_split{1})) = sections{i};
    end

    % find all regions from ``[viewer]'' section, ``region_list'' property
    region_list_index = strfind(sections_dict('[viewer]'), 'region_list=') + 12;
    viewer = sections_dict('[viewer]');
    region_list_str = strsplit(viewer(region_list_index:end), '\n');
    region_list_str = region_list_str{1}(1:end - 1);
    region_list = strsplit(region_list_str, ';');
    ini_names = {};
    data_names = {};
    % iterator i goes through all regions to generate ini_names and data_names
    for i = 1:length(region_list)
        file_viewer = sections_dict('[viewer]');
        file_region = sections_dict(['[viewer.', region_list{i}, ']']);
        file_channel = sections_dict(['[viewer.', region_list{i}, '.channel_0]']);
        file_str = [file_viewer, '\n', file_region, '\n', file_channel];
        file_name = fullfile(filepath, ['viewer_', region_list{i}, '.ini']);
        fid = fopen(file_name, 'wt');
        ini_names{i} = file_name;
        % file creating and writing
        fprintf(fid, file_str);
        fclose(fid);
        % get data name from ``[viewer.region_N]'' section, ``name'' property
        data_name_index = strfind(file_region, 'name') + 5;
        start_from_data_name = strsplit(file_region(data_name_index:end), '\n');
        data_name_with_ret = start_from_data_name{1};
        data_name = [name_head, '_', data_name_with_ret(1:end - 1)];
        data_names{i} = data_name;
        % to maintain the previous convention, do nothing to the name when
        % there is only 1 data
        if length(region_list) == 1
            data_names{i} = name_head;
        end

    end

end
